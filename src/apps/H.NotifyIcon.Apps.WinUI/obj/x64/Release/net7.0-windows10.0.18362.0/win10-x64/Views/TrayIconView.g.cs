#pragma checksum "C:\Users\noahj\OneDrive\Dokumente\Visual Studio 2022\repos\PowerMode\src\apps\H.NotifyIcon.Apps.WinUI\Views\TrayIconView.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "7065E54A86821A6D19CD784A39B2F86E3B01FBE5348E0A66F95575A0C9CE48F2"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace H.NotifyIcon.Apps.Views
{
    partial class TrayIconView : 
        global::Microsoft.UI.Xaml.Controls.UserControl, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2307")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_H_NotifyIcon_TaskbarIcon_IconSource(global::H.NotifyIcon.TaskbarIcon obj, global::Microsoft.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.IconSource = value;
            }
            public static void Set_H_NotifyIcon_TaskbarIcon_LeftClickCommand(global::H.NotifyIcon.TaskbarIcon obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.LeftClickCommand = value;
            }
            public static void Set_H_NotifyIcon_TaskbarIcon_RightClickCommand(global::H.NotifyIcon.TaskbarIcon obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.RightClickCommand = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_MenuFlyoutItem_Command(global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2307")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class TrayIconView_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            ITrayIconView_Bindings
        {
            private global::H.NotifyIcon.Apps.Views.TrayIconView dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Microsoft.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Microsoft.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::H.NotifyIcon.TaskbarIcon obj2;
            private global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem obj8;
            private global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem obj9;

            private TrayIconView_obj1_BindingsTracking bindingsTracking;

            public TrayIconView_obj1_Bindings()
            {
                this.bindingsTracking = new TrayIconView_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // Views\TrayIconView.xaml line 22
                        this.obj2 = global::WinRT.CastExtensions.As<global::H.NotifyIcon.TaskbarIcon>(target);
                        break;
                    case 8: // Views\TrayIconView.xaml line 42
                        this.obj8 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem>(target);
                        break;
                    case 9: // Views\TrayIconView.xaml line 44
                        this.obj9 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2307")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // ITrayIconView_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::H.NotifyIcon.Apps.Views.TrayIconView>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Microsoft.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Microsoft.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Microsoft.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Microsoft.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Microsoft.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Microsoft.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::H.NotifyIcon.Apps.Views.TrayIconView obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_IsBatterySaverOn(obj.IsBatterySaverOn, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_LoadCommand(obj.LoadCommand, phase);
                        this.Update_ShowHideWindowCommand(obj.ShowHideWindowCommand, phase);
                        this.Update_ExitApplicationCommand(obj.ExitApplicationCommand, phase);
                    }
                }
            }
            private void Update_IsBatterySaverOn(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\TrayIconView.xaml line 22
                    XamlBindingSetters.Set_H_NotifyIcon_TaskbarIcon_IconSource(this.obj2, (global::Microsoft.UI.Xaml.Media.ImageSource)this.LookupConverter("BoolToImageSourceConverter").Convert(obj, typeof(global::Microsoft.UI.Xaml.Media.ImageSource), null, null), null);
                }
            }
            private void Update_LoadCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\TrayIconView.xaml line 22
                    XamlBindingSetters.Set_H_NotifyIcon_TaskbarIcon_LeftClickCommand(this.obj2, obj, null);
                    // Views\TrayIconView.xaml line 22
                    XamlBindingSetters.Set_H_NotifyIcon_TaskbarIcon_RightClickCommand(this.obj2, obj, null);
                }
            }
            private void Update_ShowHideWindowCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\TrayIconView.xaml line 42
                    XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_MenuFlyoutItem_Command(this.obj8, obj, null);
                }
            }
            private void Update_ExitApplicationCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\TrayIconView.xaml line 44
                    XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_MenuFlyoutItem_Command(this.obj9, obj, null);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2307")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class TrayIconView_obj1_BindingsTracking
            {
                private global::System.WeakReference<TrayIconView_obj1_Bindings> weakRefToBindingObj; 

                public TrayIconView_obj1_BindingsTracking(TrayIconView_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<TrayIconView_obj1_Bindings>(obj);
                }

                public TrayIconView_obj1_Bindings TryGetBindingObject()
                {
                    TrayIconView_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TrayIconView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::H.NotifyIcon.Apps.Views.TrayIconView obj = sender as global::H.NotifyIcon.Apps.Views.TrayIconView;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_IsBatterySaverOn(obj.IsBatterySaverOn, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsBatterySaverOn":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsBatterySaverOn(obj.IsBatterySaverOn, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::H.NotifyIcon.Apps.Views.TrayIconView obj)
                {
                    TrayIconView_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2307")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\TrayIconView.xaml line 22
                {
                    this.TrayIcon = global::WinRT.CastExtensions.As<global::H.NotifyIcon.TaskbarIcon>(target);
                }
                break;
            case 3: // Views\TrayIconView.xaml line 35
                {
                    this.MenuFlyout1 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyout>(target);
                }
                break;
            case 4: // Views\TrayIconView.xaml line 36
                {
                    this.RecommendedItem = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem)this.RecommendedItem).Click += this.Recom_Click;
                }
                break;
            case 5: // Views\TrayIconView.xaml line 37
                {
                    this.BetterPerformanceItem = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem)this.BetterPerformanceItem).Click += this.Bett_Click;
                }
                break;
            case 6: // Views\TrayIconView.xaml line 38
                {
                    this.BestPerformanceItem = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem)this.BestPerformanceItem).Click += this.Best_Click;
                }
                break;
            case 7: // Views\TrayIconView.xaml line 40
                {
                    this.BatterySaverItem = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem)this.BatterySaverItem).Click += this.Battery_Click;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2307")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\TrayIconView.xaml line 1
                {                    
                    global::Microsoft.UI.Xaml.Controls.UserControl element1 = (global::Microsoft.UI.Xaml.Controls.UserControl)target;
                    TrayIconView_obj1_Bindings bindings = new TrayIconView_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

